# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hero_msgs/BasicExecutorRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BasicExecutorRequest(genpy.Message):
  _md5sum = "8f8f42ab7f78246732e3373077b186c3"
  _type = "hero_msgs/BasicExecutorRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 MOVE_TO_POSITION = 1
uint8 ATTACK_ROBOT = 2
uint8 ENGAGE_ROBOT = 3
uint8 HALT = 4
uint8 command
string robot_name
bool yaw_control
float64 position_x
float64 position_y
string saying
"""
  # Pseudo-constants
  MOVE_TO_POSITION = 1
  ATTACK_ROBOT = 2
  ENGAGE_ROBOT = 3
  HALT = 4

  __slots__ = ['command','robot_name','yaw_control','position_x','position_y','saying']
  _slot_types = ['uint8','string','bool','float64','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,robot_name,yaw_control,position_x,position_y,saying

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicExecutorRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = 0
      if self.robot_name is None:
        self.robot_name = ''
      if self.yaw_control is None:
        self.yaw_control = False
      if self.position_x is None:
        self.position_x = 0.
      if self.position_y is None:
        self.position_y = 0.
      if self.saying is None:
        self.saying = ''
    else:
      self.command = 0
      self.robot_name = ''
      self.yaw_control = False
      self.position_x = 0.
      self.position_y = 0.
      self.saying = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.command))
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2d().pack(_x.yaw_control, _x.position_x, _x.position_y))
      _x = self.saying
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.command,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.yaw_control, _x.position_x, _x.position_y,) = _get_struct_B2d().unpack(str[start:end])
      self.yaw_control = bool(self.yaw_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.saying = str[start:end].decode('utf-8')
      else:
        self.saying = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.command))
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2d().pack(_x.yaw_control, _x.position_x, _x.position_y))
      _x = self.saying
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.command,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.yaw_control, _x.position_x, _x.position_y,) = _get_struct_B2d().unpack(str[start:end])
      self.yaw_control = bool(self.yaw_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.saying = str[start:end].decode('utf-8')
      else:
        self.saying = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2d = None
def _get_struct_B2d():
    global _struct_B2d
    if _struct_B2d is None:
        _struct_B2d = struct.Struct("<B2d")
    return _struct_B2d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hero_msgs/BasicExecutorResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BasicExecutorResponse(genpy.Message):
  _md5sum = "99f30f8d8cf28fa4411b9b2a9dbd60cb"
  _type = "hero_msgs/BasicExecutorResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 OK = 100
uint8 I_AM_DEAD = 101
uint8 OUT_OF_AMMO = 102
uint8 TARGET_IS_DEAD = 103
uint8 INVALID_TARGET = 104
uint8 error_code

"""
  # Pseudo-constants
  OK = 100
  I_AM_DEAD = 101
  OUT_OF_AMMO = 102
  TARGET_IS_DEAD = 103
  INVALID_TARGET = 104

  __slots__ = ['error_code']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicExecutorResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error_code is None:
        self.error_code = 0
    else:
      self.error_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.error_code,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.error_code,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class BasicExecutor(object):
  _type          = 'hero_msgs/BasicExecutor'
  _md5sum = '325ca9264209204e72b5e0c4ca8bae2e'
  _request_class  = BasicExecutorRequest
  _response_class = BasicExecutorResponse
