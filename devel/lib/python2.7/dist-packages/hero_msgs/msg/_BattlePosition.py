# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hero_msgs/BattlePosition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hero_msgs.msg

class BattlePosition(genpy.Message):
  _md5sum = "489a047d00172221ccddcce4b5adc631"
  _type = "hero_msgs/BattlePosition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 robots_num
hero_msgs/RobotPosition[] robots_position

================================================================================
MSG: hero_msgs/RobotPosition
string robot_name
hero_msgs/Position position
hero_msgs/Position[4] armor_plates
int32 health

================================================================================
MSG: hero_msgs/Position
float64 x
float64 y
float64 yaw
"""
  __slots__ = ['robots_num','robots_position']
  _slot_types = ['int16','hero_msgs/RobotPosition[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robots_num,robots_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BattlePosition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robots_num is None:
        self.robots_num = 0
      if self.robots_position is None:
        self.robots_position = []
    else:
      self.robots_num = 0
      self.robots_position = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_h().pack(self.robots_num))
      length = len(self.robots_position)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_position:
        _x = val1.robot_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.yaw))
        for val2 in val1.armor_plates:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.yaw))
        buff.write(_get_struct_i().pack(val1.health))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.robots_position is None:
        self.robots_position = None
      end = 0
      start = end
      end += 2
      (self.robots_num,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_position = []
      for i in range(0, length):
        val1 = hero_msgs.msg.RobotPosition()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.robot_name = str[start:end].decode('utf-8')
        else:
          val1.robot_name = str[start:end]
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.yaw,) = _get_struct_3d().unpack(str[start:end])
        val1.armor_plates = []
        for i in range(0, 4):
          val2 = hero_msgs.msg.Position()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.yaw,) = _get_struct_3d().unpack(str[start:end])
          val1.armor_plates.append(val2)
        start = end
        end += 4
        (val1.health,) = _get_struct_i().unpack(str[start:end])
        self.robots_position.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_h().pack(self.robots_num))
      length = len(self.robots_position)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots_position:
        _x = val1.robot_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.yaw))
        for val2 in val1.armor_plates:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.yaw))
        buff.write(_get_struct_i().pack(val1.health))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.robots_position is None:
        self.robots_position = None
      end = 0
      start = end
      end += 2
      (self.robots_num,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robots_position = []
      for i in range(0, length):
        val1 = hero_msgs.msg.RobotPosition()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.robot_name = str[start:end].decode('utf-8')
        else:
          val1.robot_name = str[start:end]
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.yaw,) = _get_struct_3d().unpack(str[start:end])
        val1.armor_plates = []
        for i in range(0, 4):
          val2 = hero_msgs.msg.Position()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.yaw,) = _get_struct_3d().unpack(str[start:end])
          val1.armor_plates.append(val2)
        start = end
        end += 4
        (val1.health,) = _get_struct_i().unpack(str[start:end])
        self.robots_position.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
