# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hero_msgs/RobotPosition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hero_msgs.msg

class RobotPosition(genpy.Message):
  _md5sum = "7d821070cef65bd1dbcfa6be273d43f8"
  _type = "hero_msgs/RobotPosition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string robot_name
hero_msgs/Position position
hero_msgs/Position[4] armor_plates
int32 health
int32 ammo

================================================================================
MSG: hero_msgs/Position
float64 x
float64 y
float64 yaw
"""
  __slots__ = ['robot_name','position','armor_plates','health','ammo']
  _slot_types = ['string','hero_msgs/Position','hero_msgs/Position[4]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_name,position,armor_plates,health,ammo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotPosition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot_name is None:
        self.robot_name = ''
      if self.position is None:
        self.position = hero_msgs.msg.Position()
      if self.armor_plates is None:
        self.armor_plates = [hero_msgs.msg.Position() for _ in range(4)]
      if self.health is None:
        self.health = 0
      if self.ammo is None:
        self.ammo = 0
    else:
      self.robot_name = ''
      self.position = hero_msgs.msg.Position()
      self.armor_plates = [hero_msgs.msg.Position() for _ in range(4)]
      self.health = 0
      self.ammo = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.position.x, _x.position.y, _x.position.yaw))
      for val1 in self.armor_plates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.yaw))
      _x = self
      buff.write(_get_struct_2i().pack(_x.health, _x.ammo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = hero_msgs.msg.Position()
      if self.armor_plates is None:
        self.armor_plates = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.position.x, _x.position.y, _x.position.yaw,) = _get_struct_3d().unpack(str[start:end])
      self.armor_plates = []
      for i in range(0, 4):
        val1 = hero_msgs.msg.Position()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.yaw,) = _get_struct_3d().unpack(str[start:end])
        self.armor_plates.append(val1)
      _x = self
      start = end
      end += 8
      (_x.health, _x.ammo,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.position.x, _x.position.y, _x.position.yaw))
      for val1 in self.armor_plates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.yaw))
      _x = self
      buff.write(_get_struct_2i().pack(_x.health, _x.ammo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = hero_msgs.msg.Position()
      if self.armor_plates is None:
        self.armor_plates = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.position.x, _x.position.y, _x.position.yaw,) = _get_struct_3d().unpack(str[start:end])
      self.armor_plates = []
      for i in range(0, 4):
        val1 = hero_msgs.msg.Position()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.yaw,) = _get_struct_3d().unpack(str[start:end])
        self.armor_plates.append(val1)
      _x = self
      start = end
      end += 8
      (_x.health, _x.ammo,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
