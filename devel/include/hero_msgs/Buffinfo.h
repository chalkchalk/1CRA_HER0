// Generated by gencpp from file hero_msgs/Buffinfo.msg
// DO NOT EDIT!


#ifndef HERO_MSGS_MESSAGE_BUFFINFO_H
#define HERO_MSGS_MESSAGE_BUFFINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hero_msgs
{
template <class ContainerAllocator>
struct Buffinfo_
{
  typedef Buffinfo_<ContainerAllocator> Type;

  Buffinfo_()
    : buff_data()
    , activated()  {
    }
  Buffinfo_(const ContainerAllocator& _alloc)
    : buff_data(_alloc)
    , activated(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _buff_data_type;
  _buff_data_type buff_data;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _activated_type;
  _activated_type activated;



  enum {
    RED_HEAL = 0u,
    BLUE_HEAL = 1u,
    RED_RELOAD = 2u,
    BLUE_RELOAD = 3u,
    MOVE_DEBUFF = 4u,
    SHOOT_DEBUFF = 5u,
  };


  typedef boost::shared_ptr< ::hero_msgs::Buffinfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hero_msgs::Buffinfo_<ContainerAllocator> const> ConstPtr;

}; // struct Buffinfo_

typedef ::hero_msgs::Buffinfo_<std::allocator<void> > Buffinfo;

typedef boost::shared_ptr< ::hero_msgs::Buffinfo > BuffinfoPtr;
typedef boost::shared_ptr< ::hero_msgs::Buffinfo const> BuffinfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hero_msgs::Buffinfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hero_msgs::Buffinfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hero_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hero_msgs': ['/home/ycz/ICRA_HERO_ws/devel/share/hero_msgs/msg', '/home/ycz/ICRA_HERO_ws/src/hero_msgs/msg', '/home/ycz/ICRA_HERO_ws/src/hero_msgs/msg/referee_system'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hero_msgs::Buffinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hero_msgs::Buffinfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hero_msgs::Buffinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hero_msgs::Buffinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hero_msgs::Buffinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hero_msgs::Buffinfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hero_msgs::Buffinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c4f9c4da40ff47acceafd74940384f2";
  }

  static const char* value(const ::hero_msgs::Buffinfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c4f9c4da40ff47aULL;
  static const uint64_t static_value2 = 0xcceafd74940384f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::hero_msgs::Buffinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hero_msgs/Buffinfo";
  }

  static const char* value(const ::hero_msgs::Buffinfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hero_msgs::Buffinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RED_HEAL = 0\n\
uint8 BLUE_HEAL = 1\n\
uint8 RED_RELOAD = 2\n\
uint8 BLUE_RELOAD = 3\n\
uint8 MOVE_DEBUFF = 4\n\
uint8 SHOOT_DEBUFF = 5\n\
uint8[] buff_data\n\
bool[] activated\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::hero_msgs::Buffinfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hero_msgs::Buffinfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.buff_data);
      stream.next(m.activated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Buffinfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hero_msgs::Buffinfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hero_msgs::Buffinfo_<ContainerAllocator>& v)
  {
    s << indent << "buff_data[]" << std::endl;
    for (size_t i = 0; i < v.buff_data.size(); ++i)
    {
      s << indent << "  buff_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.buff_data[i]);
    }
    s << indent << "activated[]" << std::endl;
    for (size_t i = 0; i < v.activated.size(); ++i)
    {
      s << indent << "  activated[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.activated[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HERO_MSGS_MESSAGE_BUFFINFO_H
