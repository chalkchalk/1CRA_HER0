// Generated by gencpp from file hero_msgs/RobotPosition.msg
// DO NOT EDIT!


#ifndef HERO_MSGS_MESSAGE_ROBOTPOSITION_H
#define HERO_MSGS_MESSAGE_ROBOTPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hero_msgs/Position.h>
#include <hero_msgs/Position.h>

namespace hero_msgs
{
template <class ContainerAllocator>
struct RobotPosition_
{
  typedef RobotPosition_<ContainerAllocator> Type;

  RobotPosition_()
    : robot_name()
    , position()
    , armor_plates()
    , health(0)
    , ammo(0)  {
    }
  RobotPosition_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , position(_alloc)
    , armor_plates()
    , health(0)
    , ammo(0)  {
  (void)_alloc;
      armor_plates.assign( ::hero_msgs::Position_<ContainerAllocator> (_alloc));
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef  ::hero_msgs::Position_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef boost::array< ::hero_msgs::Position_<ContainerAllocator> , 4>  _armor_plates_type;
  _armor_plates_type armor_plates;

   typedef int32_t _health_type;
  _health_type health;

   typedef int32_t _ammo_type;
  _ammo_type ammo;





  typedef boost::shared_ptr< ::hero_msgs::RobotPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hero_msgs::RobotPosition_<ContainerAllocator> const> ConstPtr;

}; // struct RobotPosition_

typedef ::hero_msgs::RobotPosition_<std::allocator<void> > RobotPosition;

typedef boost::shared_ptr< ::hero_msgs::RobotPosition > RobotPositionPtr;
typedef boost::shared_ptr< ::hero_msgs::RobotPosition const> RobotPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hero_msgs::RobotPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hero_msgs::RobotPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hero_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hero_msgs': ['/home/ycz/ICRA_HERO_ws/devel/share/hero_msgs/msg', '/home/ycz/ICRA_HERO_ws/src/hero_msgs/msg', '/home/ycz/ICRA_HERO_ws/src/hero_msgs/msg/referee_system'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hero_msgs::RobotPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hero_msgs::RobotPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hero_msgs::RobotPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hero_msgs::RobotPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hero_msgs::RobotPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hero_msgs::RobotPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hero_msgs::RobotPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d821070cef65bd1dbcfa6be273d43f8";
  }

  static const char* value(const ::hero_msgs::RobotPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d821070cef65bd1ULL;
  static const uint64_t static_value2 = 0xdbcfa6be273d43f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::hero_msgs::RobotPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hero_msgs/RobotPosition";
  }

  static const char* value(const ::hero_msgs::RobotPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hero_msgs::RobotPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_name\n\
hero_msgs/Position position\n\
hero_msgs/Position[4] armor_plates\n\
int32 health\n\
int32 ammo\n\
\n\
================================================================================\n\
MSG: hero_msgs/Position\n\
float64 x\n\
float64 y\n\
float64 yaw\n\
";
  }

  static const char* value(const ::hero_msgs::RobotPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hero_msgs::RobotPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.position);
      stream.next(m.armor_plates);
      stream.next(m.health);
      stream.next(m.ammo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hero_msgs::RobotPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hero_msgs::RobotPosition_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::hero_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "armor_plates[]" << std::endl;
    for (size_t i = 0; i < v.armor_plates.size(); ++i)
    {
      s << indent << "  armor_plates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hero_msgs::Position_<ContainerAllocator> >::stream(s, indent + "    ", v.armor_plates[i]);
    }
    s << indent << "health: ";
    Printer<int32_t>::stream(s, indent + "  ", v.health);
    s << indent << "ammo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ammo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HERO_MSGS_MESSAGE_ROBOTPOSITION_H
