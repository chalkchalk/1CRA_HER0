// Generated by gencpp from file hero_msgs/BasicExecutorStatus.msg
// DO NOT EDIT!


#ifndef HERO_MSGS_MESSAGE_BASICEXECUTORSTATUS_H
#define HERO_MSGS_MESSAGE_BASICEXECUTORSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hero_msgs
{
template <class ContainerAllocator>
struct BasicExecutorStatus_
{
  typedef BasicExecutorStatus_<ContainerAllocator> Type;

  BasicExecutorStatus_()
    : state(0)
    , robot_name()
    , target_name()
    , move_x(0.0)
    , move_y(0.0)  {
    }
  BasicExecutorStatus_(const ContainerAllocator& _alloc)
    : state(0)
    , robot_name(_alloc)
    , target_name(_alloc)
    , move_x(0.0)
    , move_y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_name_type;
  _target_name_type target_name;

   typedef double _move_x_type;
  _move_x_type move_x;

   typedef double _move_y_type;
  _move_y_type move_y;



  enum {
    MOVE_TO_POSITION = 1u,
    ATTACK_ROBOT = 2u,
    IDLE = 3u,
  };


  typedef boost::shared_ptr< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BasicExecutorStatus_

typedef ::hero_msgs::BasicExecutorStatus_<std::allocator<void> > BasicExecutorStatus;

typedef boost::shared_ptr< ::hero_msgs::BasicExecutorStatus > BasicExecutorStatusPtr;
typedef boost::shared_ptr< ::hero_msgs::BasicExecutorStatus const> BasicExecutorStatusConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hero_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hero_msgs': ['/home/ycz/ICRA_HERO_ws/devel/share/hero_msgs/msg', '/home/ycz/ICRA_HERO_ws/src/hero_msgs/msg', '/home/ycz/ICRA_HERO_ws/src/hero_msgs/msg/referee_system'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f13bcadfb243ddd81dbe4444edcd6a1c";
  }

  static const char* value(const ::hero_msgs::BasicExecutorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf13bcadfb243ddd8ULL;
  static const uint64_t static_value2 = 0x1dbe4444edcd6a1cULL;
};

template<class ContainerAllocator>
struct DataType< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hero_msgs/BasicExecutorStatus";
  }

  static const char* value(const ::hero_msgs::BasicExecutorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MOVE_TO_POSITION = 1\n\
uint8 ATTACK_ROBOT = 2\n\
uint8 IDLE = 3\n\
uint8 state\n\
string robot_name\n\
string target_name\n\
float64 move_x\n\
float64 move_y\n\
";
  }

  static const char* value(const ::hero_msgs::BasicExecutorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.robot_name);
      stream.next(m.target_name);
      stream.next(m.move_x);
      stream.next(m.move_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BasicExecutorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hero_msgs::BasicExecutorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hero_msgs::BasicExecutorStatus_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "target_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_name);
    s << indent << "move_x: ";
    Printer<double>::stream(s, indent + "  ", v.move_x);
    s << indent << "move_y: ";
    Printer<double>::stream(s, indent + "  ", v.move_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HERO_MSGS_MESSAGE_BASICEXECUTORSTATUS_H
